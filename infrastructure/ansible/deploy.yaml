---
- hosts: web
  become: true
  vars:
    region: eu-west-3
    ecr_repo: "{{ ecr_repo }}"  # passÃ© depuis GitHub Actions via extra-vars

  tasks:
    - name: Install prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present
        update_cache: yes

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present

    - name: Install Docker
      apt:
        name: 
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes

    - name: Ensure Docker service is started and enabled
      service:
        name: docker
        state: started
        enabled: true

    - name: Install AWS CLI and other prerequisites
      apt:
        name:
          - python3-pip
          - awscli
        state: present

    - name: Configure AWS credentials
      shell: |
        mkdir -p ~/.aws
        echo "[default]" > ~/.aws/credentials
        echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
        echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
        echo "[default]" > ~/.aws/config
        echo "region = {{ region }}" >> ~/.aws/config
      environment:
        AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}

    - name: Login to Amazon ECR
      shell: |
        aws ecr get-login-password --region {{ region }} | docker login --username AWS --password-stdin {{ ecr_repo.split('/')[0] }}
      environment:
        AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}
        AWS_DEFAULT_REGION: "{{ region }}"

    - name: Stop and remove old container (if exists)
      shell: |
        docker ps -q --filter "name=user-service" | xargs -r docker stop
        docker ps -a -q --filter "name=user-service" | xargs -r docker rm
      ignore_errors: true

    - name: Pull latest image from ECR
      shell: docker pull {{ ecr_repo }}

    - name: Run the new container on port 80
      shell: |
        docker run -d \
          --name user-service \
          -p 80:8080 \
          --restart always \
          {{ ecr_repo }}
